" Basic Stuff {
    execute pathogen#infect()
    syntax on
    filetype plugin indent on
    set nocompatible "vim, not vi
    set t_Co=256
    set omnifunc=syntaxcomplete#Complete "Turn on OmniCompletion

    " http://stackoverflow.com/questions/2169645/vims-autocomplete-is-excruciatingly-slow
    set complete-=i

    scriptencoding utf-8
    set encoding=utf-8

    set viminfo='100,<1000,s10,h

    syntax enable

    set background=dark
    " solarized options
    let g:solarized_termtrans = 1
    let g:solarized_termcolors = 256
    let g:vim_json_syntax_conceal = 0
    colorscheme solarized
    set clipboard=unnamedplus
" }

"" Options {
    set nohidden "remove the buffer when the tab is closed
    set wildmode=longest:full
    set wildmenu " better command-line completion
    set showcmd " partial commands in the last line
    set hlsearch " may want to change this to underline
    set showmatch  " show matching bracket
" }

" Usability {
    " Ctrl-j and ctrl-k moves a line up and down
    nnoremap <c-j> :m .+1<CR>==
    nnoremap <c-k> :m .-2<CR>==
    inoremap <c-j> <Esc>:m .+1<CR>==gi
    inoremap <c-k> <Esc>:m .-2<CR>==gi
    vnoremap <c-j> :m '>+1<CR>gv=gv
    vnoremap <c-k> :m '<-2<CR>gv=gv

    " Shift-Enter for escape
    inoremap <S-CR> <Esc>

    set ruler "show where we are
    set laststatus=2 "display the status line always
    set cmdheight=2 "two lines at the bottom, to keep things from getting hidden
    set pastetoggle=<F5> "so we can paste stuff without annoying indents
    set number

    " Show Whitespace
    set list
    set listchars=eol:¶,tab:»·,trail:˽,extends:›,precedes:‹ " Some other good chars (˷˽ˍ)
    hi SpecialText ctermfg=235 ctermbg=NONE cterm=NONE
    hi NonText ctermfg=235 ctermbg=NONE cterm=NONE

    " This toggles a paste mode that will turn off line numbers, the mouse, and list if they are enabled
    let g:old_nu=&nu " Sets the NU remember mode
    let g:old_mouse=&mouse " Sets the mouse remember mode
    let g:old_list=&list " Sets the mouse remember mode
    imap <silent> <F2> <Esc><F2>a
    nmap <silent> <F2> :if &paste <Bar>
                \set nopaste <Bar>
                \let &nu=g:old_nu <Bar>
                \let &mouse=g:old_mouse <Bar>
                \let &list=g:old_list <Bar>
                \call ToggleSignify(1) <Bar>
                \echo "(nu="g:old_nu") (mouse="g:old_mouse") (list="g:old_list") (paste= 0 ) (signify="g:old_list")" <bar>
                \else <Bar>
                \let g:old_nu=&nu <Bar>
                \let g:old_mouse=&mouse <Bar>
                \let g:old_list=&list <Bar>
                \call ToggleSignify(0) <Bar>
                \let &nu=0 <Bar>
                \let &mouse="" <Bar>
                \let &list=0 <Bar>
                \let &paste=1 <Bar>
                \echo "(nu= 0 ) (mouse=  ) (list= 0 ) (paste= 1 )"<bar>
                \endif <cr>

    " Toggle numbered lines on F3
    imap <silent> <F3> <Esc><F3>a
    nmap <F3> :set number! number?<Bar>
                \echo "(nu="&nu") (mouse="&mouse") (list="&list") (paste="&paste")"<cr>

    " Toggle mouse on F4
    imap <silent> <F4> <Esc><F4>a
    nmap <F4> :if &mouse=="" <Bar>
                \let &mouse="a" <Bar>
                \echo "(nu="&nu") (mouse= a ) (list="&list") (paste="&paste")"<bar>
                \else <Bar>
                \let &mouse="" <Bar>
                \echo "(nu="&nu") (mouse=  ) (list="&list") (paste="&paste")"<bar>
                \endif<cr>
" }


" indentation {
    set autoindent "indentation
    set shiftwidth=2
    set softtabstop=2
    set expandtab
    set backspace=indent,eol,start
    " set textwidth=79
    set tabstop=8

    " Python {
      au FileType python setl sw=4 sts=4
    " }
" }
 
" nerdtree {
    let NERDTreeIgnore = ['\.pyc$', '\.pyo$']
    noremap gn :NERDTree<Cr>

    " Switch Between Buffers
    map  <C-l> :bn<CR>
    map  <C-h> :bp<CR>
    map  <C-t> :NERDTreeToggle<cr>

    "  How can I close vim if the only window left open is a NERDTree?
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" }

" tmuxline {
  let g:tmuxline_separators = {
        \ 'left' : '',
        \ 'left_alt': '>',
        \ 'right' : '',
        \ 'right_alt' : '<',
        \ 'space' : ' '}
" }

" Unsorted {
    set shortmess+=filmnrxoOtT      " abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash " better unix / windows compatibility
    set virtualedit=onemore         " allow for cursor beyond last character
    set history=1000                " Store a ton of history (default is 20)
    set spell                       " spell checking on
    hi clear SpellBad
    hi SpellBad cterm=underline
    set showmode "display the current mode
    set cursorline "highlights the light we're on
    "set cursorcolumn "highlights the light we're on
    hi clear cursorline "We don't want an underline
    "hi clear cursorcolumn "We don't want an underline
    hi cursorline guibg=#111111 ctermbg=233 "Sets the highlight color
    "hi CursorColumn guibg=#333333 ctermbg=0 "highlights the cursor
    set whichwrap=b,s,h,l,<,>,[,] "wrap backspace and cursor

    "folding settings
    set foldmethod=indent   "fold based on indent
    set foldnestmax=10      "deepest fold is 10 levels
    set nofoldenable        "dont fold by default
    set foldlevel=1         "this is just what i use
    let g:vim_markdown_initial_foldlevel=100 "Markdown plugin defaults to being folded

    "jsbeautify
    autocmd FileType javascript vnoremap <buffer>  <Leader>f :call RangeJsFormat()<cr> 
    autocmd FileType javascript nnoremap <buffer>  <Leader>f :call JsFormat()<cr>
    autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr> :call RangeJsFormat()<cr>
    autocmd FileType javascript nnoremap <buffer>  <c-f> :call JsBeautify()<cr> :call JsFormat()<cr>
    autocmd FileType json vnoremap <buffer>  <Leader>f :call RangeJsonFormat()<cr> 
    autocmd FileType json nnoremap <buffer>  <Leader>f :call JsonFormat()<cr>
    autocmd FileType json vnoremap <buffer>  <c-f> :call RangeJsonBeautify()<cr> :call RangeJsFormat()<cr>
    autocmd FileType json nnoremap <buffer>  <c-f> :call JsonBeautify()<cr> :call JsFormat()<cr>
    autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
    autocmd FileType html nnoremap <buffer> <c-f> :call HtmlBeautify()<cr>
    autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>
    autocmd FileType css nnoremap <buffer> <c-f> :call CSSBeautify()<cr>
    autocmd FileType mss vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>
    autocmd FileType mss nnoremap <buffer> <c-f> :call CSSBeautify()<cr>
    autocmd FileType python vnoremap <buffer> <c-f> :call RangePythonFormat()<cr>
    autocmd FileType python nnoremap <buffer> <c-f> :call PythonFormat()<cr>
    autocmd FileType python vnoremap <buffer> <Leader>f :call RangePythonFormatAggressive()<cr>
    autocmd FileType python nnoremap <buffer> <Leader>f :call PythonFormatAggressive()<cr>
    autocmd FileType python vnoremap <buffer> <Leader>F :call RangePythonFormatExtraAggressive()<cr>
    autocmd FileType python nnoremap <buffer> <Leader>F :call PythonFormatExtraAggressive()<cr>



    "Filetypes
    au BufRead,BufNewFile *.mss set filetype=carto
    au BufRead,BufNewFile *.{json,geojson} set filetype=json
    au BufRead,BufNewFile /etc/nginx/* if &ft == "dcl" || &ft == "" | set filetype=nginx | endif

    "Ctrl-P
    set wildignore+=*/tmp/*,*.so,*.swp,*.zip 
    let g:ctrlp_map = '<c-p>'
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }

    "Delays when using escape key in terminal
    " https://github.com/mhinz/vim-galore#delays-when-using-escape-key-in-terminal
    set timeout           " for mappings
    set timeoutlen=1000   " default value
    set ttimeout          " for key codes
    set ttimeoutlen=10    " unnoticeable small value

    " Keep yankring files in the dotfiles directory (this needs a
    " cooresponding gitignore unless you are working on completely open source
    " stuff!
    " let g:yankring_history_dir = '~/dotfiles/vim'
" }

" TMUX Cursor {
    if exists('$TMUX') 
      let &t_SI = "\<Esc>[3 q"
      let &t_EI = "\<Esc>[0 q"
    else
      let &t_SI = "\<Esc>]50;CursorShape=1\x7"
      let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif
" }

" Functions {
    " https://github.com/scrooloose/nerdtree/blob/master/README.markdown
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

    " Syntastic
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    " let g:syntastic_javascript_checkers = ['semistandard']
    let g:syntastic_javascript_checkers = ['eslint']
    let g:syntastic_typescript_checkers = ['tslint', 'tsc']

    "Signify
    let g:signify_vcs_list = [ 'git' ]
    let g:signify_disable_by_default = 0 "Don't run Sy by default, toggle it anytime via :SignifyToggle.

    let g:signify_status= (g:signify_disable_by_default + 1) % 2 " Sets the signify remember mode
    function! ToggleSignify(new_status)
      if a:new_status==g:signify_status
        echom "no change"
      else
        if g:signify_status==0
          let g:signify_status=1 " Sets the signify remember mode
        else
          let g:signify_status=0 " Sets the signify remember mode
        endif
        :SignifyToggle
      endif
    endfunction

    " for tmux to automatically set paste and nopaste mode at the time pasting (as
    " happens in VIM UI)

    function! WrapForTmux(s)
      if !exists('$TMUX')
        return a:s
      endif

      let tmux_start = "\<Esc>Ptmux;"
      let tmux_end = "\<Esc>\\"

      return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
    endfunction

    let &t_SI .= WrapForTmux("\<Esc>[?2004h")
    let &t_EI .= WrapForTmux("\<Esc>[?2004l")

    function! XTermPasteBegin()
      set pastetoggle=<Esc>[201~
      set paste
      return ""
    endfunction

    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
" }
