# ###########################################################################
# This tmux statusbar config was created by tmuxline.vim
# on Tue, 08 Apr 2014
# {
  set -g status-bg 'colour235'
  set -g message-command-fg 'colour254'
  set -g status-justify 'left'
  set -g status-left-length '100'
  set -g status 'on'
  set -g pane-active-border-fg 'colour245'
  set -g message-bg 'colour241'
  set -g status-right-length '100'
  set -g status-right-attr 'none'
  set -g message-fg 'colour254'
  set -g message-command-bg 'colour241'
  set -g status-attr 'none'
  set -g status-utf8 'on'
  set -g pane-border-fg 'colour241'
  set -g status-left-attr 'none'
  setw -g window-status-fg 'colour240'
  setw -g window-status-attr 'none'
  setw -g window-status-activity-bg 'colour235'
  setw -g window-status-activity-attr 'none'
  setw -g window-status-activity-fg 'colour245'
  setw -g window-status-bg 'colour235'
  set -g status-left '#[fg=colour230,bg=colour245,bold] #S #[fg=colour245,bg=colour235,nobold,nounderscore,noitalics]'
  set -g status-right '#[fg=colour241,bg=colour235,nobold,nounderscore,noitalics]#[fg=colour254,bg=colour241] %Y-%m-%d < %H:%M #[fg=colour245,bg=colour241,nobold,nounderscore,noitalics]#[fg=colour230,bg=colour245] #h '
  setw -g window-status-format '#[fg=colour240,bg=colour235] #I >#[fg=colour240,bg=colour235] #W '
  setw -g window-status-current-format '#[fg=colour235,bg=colour241,nobold,nounderscore,noitalics]#[fg=colour254,bg=colour241] #I >#[fg=colour254,bg=colour241] #W #[fg=colour241,bg=colour235,nobold,nounderscore,noitalics]'
# }
# ###########################################################################

# ###########################################################################
# from Pragmatic tmux 978-1-93435-696-8
# {

  # Use Ctrl-a instead of Ctrl-b
  # {
    set -g prefix C-a
  # }

  # While not necessary, we can use the unbind-key, or unbind command to remove a keybinding that’s been defined, so we can assign a different command to this key later.`
  # {
    unbind C-b
  # }

  # Sending the prefix to other applications
  # I like the Ctrl-A function in vi, so this is *required*
  # {
    bind C-a send-prefix
  # }

  # "tmux adds a very small delay when sending commands, and this delay can interfere with other programs such as the Vim text editor. We can set this delay so it’s much more responsive:"
  # {
    set -s escape-time 1
  # }

  # reload config
  # {
    bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded!"
  # }

  # C-b is not acceptable -- Vim uses it
  # {
    bind-key C-a send-prefix
  # }

  # Splitting Panes | and - make more sense than " and %, respectively, " and % will still work
  # {
    # bind | split-window -h
    # bind - split-window -v
  # }

  # Remapping key movements
  # Moving from pane to pane with PREFIX o is a little cumbersome, and using the arrow keys means we have to take our fingers off the home row.
  # {
    bind h select-pane -L
    bind j select-pane -D
    bind k select-pane -U
    bind l select-pane -R
  # }

  # Switching Windows: Make window switching easier
  # the -r prefix makes this repeatable
  # {
    bind -r C-h select-window -t :-
    bind -r C-l select-window -t :+
  # }

  # Resizing Panes: HJKL pane resize
  # {
    bind -r H resize-pane -L 5
    bind -r J resize-pane -D 5
    bind -r K resize-pane -U 5
    bind -r L resize-pane -R 5
  # }

  # Mouse settings: Explicitly off!
  # The mouse gets in the way of how i use the terminal, and the scroll doesn't work in vi anyway
  # {
    # setw -g mode-mouse off
    # set -g mouse-select-pane off
    # set -g mouse-resize-pane off
    # set -g mouse-select-window off
  # }

  # make tmux display things in 256 colors
  # {
    set -g default-terminal "screen-256color"
  # }

  # Updates for "saner" tmuxing
  # https://unix.stackexchange.com/questions/126976/tmux-config-not-retaining-pwd-on-new-window-or-window-split
  # {
    bind % split-window -c "#{pane_current_path}" -h
    bind '"' split-window -c "#{pane_current_path}" -v
  # }


# }
# ###########################################################################

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# start selecting text typing 'v' key (once you are in copy mode)
bind-key -t vi-copy v begin-selection

# copy selected text to the system's clipboard
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
